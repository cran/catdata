% \VignetteIndexEntry{Regularization and Variable Selection for Parametric Models (2)}
% \VignetteDepends{lqa, lpSolve, mboost, GAMBoost, glmnet, penalized}

\documentclass[a4paper]{article}

\title{Regularization and Variable Selection for Parametric Models (2)}

\begin{document}

\maketitle


<<echo=FALSE,eval=FALSE>>=
options(width=60)
@

<<eval=FALSE>>=
library(lqa)
library(lpSolve)
library(mboost)
library(GAMBoost)
library(glmnet)
library(penalized)
source("gdscode.txt")

source("glmOSCAR_101028.r")
load("heart.data.RData")

library(catdata)
@

<<eval=FALSE>>=
data(heart)

X<-heart[,-1]
y<-heart[,1]
X.std<-scale(X,center=TRUE,scale=TRUE)
p<-ncol(X)
n<-length(y)
family <- binomial()
n.fold<-10

ylab.text<-""
xlab.text<-""
Width = 6 
Height = 6 
oma.vec<-c(1,1,1,3) 
size.axis=1.4 
size.lab=1.4 
size.main=1.4 
size.right=1.2 
size.width=2.0
colour=1
@




 OSCAR glm Petry (oct10)

<<eval=FALSE>>=
K<-n.fold
n<-length(y)
f <- ceiling(n/K)
set.seed(123)
s <- sample(rep(1:K, f), n)
ms <- max(s)
splitM<-matrix(0,n,K)
for(j in 1:ms)
{
  j.out <- c(1:n)[(s == j)]
  j.in <- c(1:n)[(s!= j)]
  splitM[j.in,j]<- 1###
}
######### c fixed
c.seq<-0.2#seq(0.1,0.9,length=10)
t.seq<-seq(0.01,0.99,length=99)

cv.oscarR<-cv.glm.oscar(X,y,family,splitM,c.seq,t.seq,epsilon)
oscarR<-glm.oscar(y,X,family,t.seq=t.seq,c=c.seq,epsilon=1e-8)
@

<<eval=FALSE>>=
Path<-oscarR$Beta.std[,-1]
@

<<fig=TRUE,eval=FALSE>>=

par(oma=oma.vec,cex.axis=size.axis,cex.lab=size.axis,cex.main=size.main)
matplot(rowSums(abs(Path))/max(rowSums(abs(Path))),Path*sqrt(n),type="l",ylab=ylab.text,xlab=xlab.text,main="oscarR (c=0.2)",lwd=size.width, col=colour)
abline(v=sum(abs(cv.oscarR$model$Beta.std[-1]))/max(rowSums(abs(Path))))
axis(4, at = Path[99, ]*sqrt(n), labels = colnames(X), adj = 0, las = 1,cex.axis=size.right)

@

<<eval=FALSE>>=
K<-n.fold
n<-length(y)
f <- ceiling(n/K)
set.seed(123)
s <- sample(rep(1:K, f), n)
ms <- max(s)
splitM<-matrix(0,n,K)
for(j in 1:ms)
{
  j.out <- c(1:n)[(s == j)]
  j.in <- c(1:n)[(s!= j)]
  splitM[j.in,j]<- 1###
}


c.seq<-0.5#seq(0.1,0.9,length=10)
t.seq<-seq(0.01,0.99,length=99)

cv.oscarR<-cv.glm.oscar(X,y,family,splitM,c.seq,t.seq,epsilon)
oscarR<-glm.oscar(y,X,family,t.seq=t.seq,c=c.seq,epsilon=1e-8)
@

<<eval=FALSE>>=
Path<-oscarR$Beta.std[,-1]
@
<<fig=TRUE,eval=FALSE>>=

par(oma=oma.vec,cex.axis=size.axis,cex.lab=size.axis,cex.main=size.main)
matplot(rowSums(abs(Path))/max(rowSums(abs(Path))),Path*sqrt(n),type="l",ylab=ylab.text,xlab=xlab.text,main="oscarR (c=0.5)",lwd=size.width, col=colour)
abline(v=sum(abs(cv.oscarR$model$Beta.std[-1]))/max(rowSums(abs(Path))))
axis(4, at = Path[99, ]*sqrt(n), labels = colnames(X), adj = 0, las = 1,cex.axis=size.right)

@

\end{document}