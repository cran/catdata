% \VignetteIndexEntry{Regularization and Variable Selection for Parametric Models (5)}
% \VignetteDepends{lqa, lpSolve, mboost, GAMBoost, glmnet, penalized}

\documentclass[a4paper]{article}

\title{Regularization and Variable Selection for Parametric Models (5)}

\begin{document}

\maketitle


<<echo=FALSE,eval=FALSE>>=
options(width=60)
@

<<eval=FALSE>>=
library(lqa)
library(lpSolve)
library(mboost)
library(GAMBoost)
library(glmnet)
library(penalized)
source("gdscode.txt")

source("glmOSCAR_101028.r")
load("heart.data.RData")
@

<<eval=FALSE>>=
X<-heart.data$x
X.std<-scale(X,center=TRUE,scale=TRUE)
y<-heart.data$y
p<-ncol(X)
n<-length(y)
family <- binomial()
n.fold<-10


ylab.text<-""
xlab.text<-""
Width = 6 
Height = 6 
oma.vec<-c(1,1,1,3) 
size.axis=1.4 
size.lab=1.4 
size.main=1.4 
size.right=1.2 
size.width=2.0
colour=1
@


 Tutz/Binder Boost

<<eval=FALSE>>=
Path<-GLMBoost(x=X.std,y,penalty=length(y),standardize=FALSE,family=binomial(),stepno=500)
Path<-Path$beta.linear*sqrt(n)
set.seed(123)
opt<-cv.GLMBoost(x=X.std,y,penalty=length(y),just.criterion=TRUE,family=binomial(),K=10,type="loglik",standardize=FALSE,maxstepno=500)
beta.opt<-Path[opt$selected,]
@


<<fig=TRUE,eval=FALSE>>=

par(oma=oma.vec,cex.axis=size.axis,cex.lab=size.axis,cex.main=size.main)
matplot(rowSums(abs(Path))/max(rowSums(abs(Path))),Path,type="l",ylab=ylab.text,xlab=xlab.text,main="GLMBoost",lwd=size.width, col=colour)
abline(v=sum(abs(beta.opt))/max(rowSums(abs(Path))))
axis(4, at = Path[500,], labels = colnames(X), adj = 0, las = 1,cex.axis=size.right)

@
 mboost

<<eval=FALSE>>=
y.boost<-as.factor(y*2-1)
X.boost<-X.std/2
mstop=500
aux<-glmboost(y.boost~X.boost,family=Binomial(),control=boost_control(mstop=mstop,nu=0.1))
Path<-matrix(0,mstop,p)
for(i in 1:500)
{
Path[i,]<-coef(aux[i],2:10)
}
boost.folds<-matrix(0,n,n.fold)
set.seed(123)
cv.folds <- split(sample(seq(n)), rep(1:n.fold, length = n))
for(i in 1:n.fold)
{
boost.folds[-cv.folds[[i]],i]<-1
}
cvm <- cvrisk(aux, folds = boost.folds,grid = floor(seq(1, to = mstop(aux), length = mstop(aux))),papply=lapply)
beta.opt<-coef(aux[mstop(cvm)],2:10)
@


<<fig=TRUE,eval=FALSE>>=

par(oma=oma.vec,cex.axis=size.axis,cex.lab=size.axis,cex.main=size.main)
matplot(c(0,rowSums(abs(Path))/max(rowSums(abs(Path)))),rbind(0,Path*sqrt(n)),type="l",ylab=ylab.text,xlab=xlab.text,main="glmboost (mboost)",lwd=size.width, col=colour)
abline(v=sum(abs(beta.opt))/max(rowSums(abs(Path))))
axis(4, at = Path[500,]*sqrt(n), labels = colnames(X), adj = 0, las = 1,cex.axis=size.right)

@


\end{document}