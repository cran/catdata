% \VignetteIndexEntry{Regularization and Variable Selection for Parametric Models (4)}
% \VignetteDepends{lqa, lpSolve, mboost, GAMBoost, glmnet, penalized}

\documentclass[a4paper]{article}

\title{Regularization and Variable Selection for Parametric Models (4)}

\begin{document}

\maketitle


<<echo=FALSE,eval=FALSE>>=
options(width=60)
@

<<eval=FALSE>>=
library(lqa)
library(lpSolve)
library(mboost)
library(GAMBoost)
library(glmnet)
library(penalized)
source("gdscode.txt")

source("glmOSCAR_101028.r")
load("heart.data.RData")
@

<<eval=FALSE>>=
X<-heart.data$x
X.std<-scale(X,center=TRUE,scale=TRUE)
y<-heart.data$y
p<-ncol(X)
n<-length(y)
family <- binomial()
n.fold<-10


ylab.text<-""
xlab.text<-""
Width = 6 
Height = 6 
oma.vec<-c(1,1,1,3) 
size.axis=1.4 
size.lab=1.4 
size.main=1.4 
size.right=1.2 
size.width=2.0
colour=1
@





 SCAD

Fixed Tuning parameter  (s entspricht a)
<<eval=FALSE>>=
s <- 3

### COEF BUILD-UPS

main.text<-"SCAD"
penalty.family<-scad

Plot.mat<-plot.lqa (y = y, x = X, family=family, penalty.family=penalty.family, offset.values = c (NA, s),add.MLE = FALSE, ret.true=TRUE,really.plot = FALSE,show.standardized=TRUE,gamma=0.01)
set.seed(123)
cv.result<-cv.lqa(y, X, intercept = TRUE, lambda.candidates= list(exp(seq(-10, 6, length = 60)),s), family=family, penalty.family=penalty.family, standardize = TRUE,  n.fold=n.fold, loss.func = "dev.loss", control = lqa.control(),gamma=0.01)
@

<<fig=TRUE,eval=FALSE>>=

par(oma=oma.vec,cex.axis=size.axis,cex.lab=size.axis,cex.main=size.main)
matplot(Plot.mat$s1,Plot.mat$beta.mat,type="l",ylab=ylab.text,xlab=xlab.text,main=main.text,lwd=size.width, col=colour)
abline(v=sum(abs(cv.result$beta.opt[-1]%*%diag(c(sd(X)))*sqrt(n)))/sum(abs(Plot.mat$beta.mat[1, ])))
axis(4, at = Plot.mat$beta.mat[1, ], labels = colnames(X), adj = 0, las = 1,cex.axis=size.right)

@

 Dantzig Selector 

<<eval=FALSE>>=
Path<-matrix(0,60,p)
lambda1<-exp(seq(-6, 1, length = 60))
for(i in 60:1)
{
Path[i,]<-dd(y,X.std,lambda=lambda1[i],family=binomial)$gds.beta[-1]*sqrt(n)
}

set.seed(123)
opt <- dd.cv(y,X.std,family=binomial,lambda=lambda1,cv=10)
beta.opt<-dd(y,X.std,family=binomial,lambda=opt$optimal)$gds.beta[-1]*sqrt(n)
@


<<fig=TRUE,eval=FALSE>>=

par(oma=oma.vec,cex.axis=size.axis,cex.lab=size.axis,cex.main=size.main)
matplot(rowSums(abs(Path))/max(rowSums(abs(Path))),Path,type="l",ylab=ylab.text,xlab=xlab.text,main="Dantzig Selector",lwd=size.width, col=colour)
abline(v=sum(abs(beta.opt))/sum(abs(Path[1, ])))
axis(4, at = Path[1, ], labels = colnames(X), adj = 0, las = 1,cex.axis=size.right)

@


\end{document}